#Add new strata to genind
strata(my_genind) <- pop.data2
#Add ploidy to our genind
ploidy(my_genind) <- 1
#Convert to genclone object
my_genclone <- poppr::as.genclone(my_genind)
#and we add the ploidy statement again, just in case.
ploidy(my_genclone) <- 1
# set population to the original known populations
strata(my_genclone) <- pop.data2
setPop(my_genclone) <- ~State
my_genclone.filtered <- missingno(my_genclone, type = "loci", cutoff = 0.1, quiet = FALSE, freq = FALSE)
setPop(my_genclone.filtered) <- ~Hyp_Final
#Lin 1 Standardized index of association
Lin1.subpop <- popsub(my_genclone.filtered, "Lin1")
gg1 <- ia(Lin1.subpop, sample = 999)
#Lin 2 Standardized index of association
Lin2.subpop <- popsub(my_genclone.filtered, "Lin2")
gg3 <- ia(Lin2.subpop, sample = 999)
#Lin 2 Standardized index of association (Clone corrected)
Lin2.subpop.cloneCorr <- popsub(my_genclone.subset.2.filtered, "Lin2")
#Lin 3 Standardized index of association
Lin3.subpop <- popsub(my_genclone.filtered, "Lin3")
gg5 <- ia(Lin3.subpop, sample = 999)
#Lineage 1
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin1))
#t2 <- clonecorrect(as.snpclone(t$Lin2))
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 500)
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 300)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 100)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 90)
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 70)
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin1 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
d1 <- data.frame(ia.lin1, rep("Lineage1", length(ia.lin1)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("most-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("semi-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg2 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) + geom_boxplot() +
xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#1B9E77", "#C1C1C1", "#6D6D6D", "#1E1E1E"))
gg2
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin2))
#t2 <- clonecorrect(as.snpclone(t$Lin2))
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
## IA clone
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin2 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
#ia.lin2 <- samp.ia(t2,  reps = 100, quiet = T, n.snp = 300)
# Summarizing data frames
d1 <- data.frame(ia.lin2, rep("Lineage2", length(ia.lin2)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("semi-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("most-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg4 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) +
geom_boxplot() + xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#D95F02", "#C1C1C1", "#6D6D6D", "#1E1E1E")) +
ylim(NA, 0.15)
gg4
#Lineage 3
#setPop(gl.necrophora.subset.2.filtered) <-  ~Hyp_Final
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin3))
#t2 <- clonecorrect(as.snpclone(t$Lin2))
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
## IA clone
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin3 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
#ia.lin2 <- samp.ia(t2,  reps = 100, quiet = T, n.snp = 300)
# Summarizing data frames
d1 <- data.frame(ia.lin3, rep("Lineage3", length(ia.lin3)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("semi-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("most-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg6 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) + geom_boxplot() +
xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#7570B3", "#C1C1C1", "#6D6D6D", "#1E1E1E"))
gg6
vcf <- read.vcfR("../input/Xylaria_153_genomes.MinQG40.MinDP5.MaxMiss0.7.necrophora.ONLY.recode.mod.singleIDs.recode.vcf")
my_genind <- vcfR2genind(vcf)
nInd(my_genind)
#Print new names for individuals that remained after conversion
adegenet::indNames(my_genind)
#Extract labels as vector
newNames <- as.vector(adegenet::indNames(my_genind))
#Subset those from original pop data
pop.data2 <- pop.data[pop.data$ID %in% newNames,]
#Add new strata to genind
strata(my_genind) <- pop.data2
#Add ploidy to our genind
ploidy(my_genind) <- 1
#Convert to genclone object
my_genclone <- poppr::as.genclone(my_genind)
#and we add the ploidy statement again, just in case.
ploidy(my_genclone) <- 1
# set population to the original known populations
strata(my_genclone) <- pop.data2
setPop(my_genclone) <- ~State
my_genclone.filtered <- missingno(my_genclone, type = "loci", cutoff = 0.1, quiet = FALSE, freq = FALSE)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 300)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 200)
setPop(gl.necrophora.filtered) <-  ~Hyp_Final
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin1))
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 200)
my_genclone.filtered$loc.n.all
my_genclone.filtered$loc.fac
my_genclone.filtered$mlg
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 200)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 100)
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
## IA clone
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin1 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
#ia.lin2 <- samp.ia(t2,  reps = 100, quiet = T, n.snp = 300)
# Summarizing data frames
d1 <- data.frame(ia.lin1, rep("Lineage1", length(ia.lin1)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("most-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("semi-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg2 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) + geom_boxplot() +
xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#1B9E77", "#C1C1C1", "#6D6D6D", "#1E1E1E"))
gg2
#setPop(gl.necrophora.subset.2.filtered) <-  ~Hyp_Final
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin2))
#t2 <- clonecorrect(as.snpclone(t$Lin2))
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
## IA clone
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin2 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
#ia.lin2 <- samp.ia(t2,  reps = 100, quiet = T, n.snp = 300)
d1 <- data.frame(ia.lin2, rep("Lineage2", length(ia.lin2)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("semi-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("most-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg4 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) +
geom_boxplot() + xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#D95F02", "#C1C1C1", "#6D6D6D", "#1E1E1E")) +
ylim(NA, 0.15)
gg4
t <- seppop(gl.necrophora.filtered)
t1 <- clonecorrect(as.snpclone(t$Lin3))
#t2 <- clonecorrect(as.snpclone(t$Lin2))
set.seed(100)
sex <- glSim(n.ind = nInd(t1), n.snp.nonstruc = ceiling(0.9*nLoc(t1)), n.snp.struc = floor(0.1*nLoc(t1)), ploidy=1, LD=TRUE)
### Structure (clonal pops)
clone <- glSim(nInd(t1), n.snp.nonstruc = floor(0.1*nLoc(t1)), n.snp.struc=ceiling(0.9*nLoc(t1)), ploidy=1, LD = T)
### Semi-clonal
semi_clone <- glSim(nInd(t1),n.snp.nonstruc = 0.5*nLoc(t1), n.snp.struc= 0.5*nLoc(t1), ploidy=1, LD=T)
### Most-clonal
most_clone <- glSim(nInd(t1), n.snp.nonstruc = ceiling(nLoc(t1)/3), n.snp.struc=2*nLoc(t1)/3, ploidy=1, LD=T)
## IA sex
ia.sex <- samp.ia(sex,quiet = T, reps = 100, n.snp = 60)
## IA clone
ia.clone <- samp.ia(clone, quiet = T, reps = 100, n.snp = 60)
## IA.semiclone
ia.semi <- samp.ia(semi_clone, quiet = T,reps = 100, n.snp = 60)
## IA.mostclone
ia.most <- samp.ia(most_clone, quiet = T, reps = 100, n.snp = 60)
ia.lin3 <- samp.ia(t1,  reps = 100, quiet = T, n.snp = 60)
#ia.lin2 <- samp.ia(t2,  reps = 100, quiet = T, n.snp = 300)
# Summarizing data frames
d1 <- data.frame(ia.lin3, rep("Lineage3", length(ia.lin3)))
d3 <- data.frame(ia.sex, rep("sexual", length(ia.sex)))
d4 <- data.frame(ia.clone, rep("clonal", length(ia.clone)))
d5 <- data.frame(ia.semi, rep("semi-clonal", length(ia.semi)))
d6 <- data.frame(ia.most, rep("most-clonal", length(ia.semi)))
colnames(d1) <- c("ia","dset")
#colnames(d2) <- c("ia","dset")
colnames(d3) <- c("ia","dset")
colnames(d4) <- c("ia","dset")
colnames(d5) <- c("ia","dset")
colnames(d6) <- c("ia","dset")
ia.total <- rbind(d4, d6, d5, d3, d1)
#ia.total <- rbind(d1, d2, d3, d4, d5)
# Normality tests
frames <- list(as.data.frame(d1), as.data.frame(d3), as.data.frame(d4), as.data.frame(d5), as.data.frame(d6))
normality <- list()
for (i in 1:length(frames)){
normality[[i]] <- shapiro.test(frames[[i]][,'ia'])
}
# Analysis of variance
anova.ia <- aov(lm(ia ~ dset, ia.total))
library(agricolae)
tukey <- HSD.test(anova.ia, "dset", alpha = 0.001)
tukey
# Kluskal wallis test
#kruskal.test(ia ~ dset, ia.total), trt="dset")
k.test <- with(ia.total, kruskal(ia, dset, group = T, p.adj = "bon"))
# Plot
gg6 <- ggplot(ia.total,aes(x=reorder(dset,-ia), y=ia,fill=dset)) + geom_boxplot() +
xlab("Dataset") + ylab("Index of association") +
scale_fill_manual(values=c("#FFFFFF", "#7570B3", "#C1C1C1", "#6D6D6D", "#1E1E1E"))
gg6
setPop(gl.necrophora.filtered) <- ~Hyp_Final
maxK <- 10
myMat <- matrix(nrow=10, ncol=maxK)
colnames(myMat) <- 1:ncol(myMat)
for(i in 1:nrow(myMat)){
grp <- find.clusters(gl.necrophora.filtered, n.pca = 20, choose.n.clust = FALSE,  max.n.clust = maxK)
myMat[i,] <- grp$Kstat
}
#Plot the results from above
library(ggplot2)
library(reshape2)
my_df <- melt(myMat)
colnames(my_df)[1:3] <- c("Group", "K", "BIC")
my_df$K <- as.factor(my_df$K)
head(my_df)
p1 <- ggplot(my_df, aes(x = K, y = BIC))
p1 <- p1 + geom_boxplot()
p1 <- p1 + theme_bw()
p1 <- p1 + xlab("Number of groups (K)")
p1
##DAPC
#In general, it is recommended to explore several values of K. The find.clusters() function includes some stochasticity. When we’re at the figure creation step we’ll need consistency, so we’ll set a seed. If you’re at an earlier stage in your analysis you should comment the set.seed() call out to explore how sensitive your results are to the seed.
my_k <- 2:8
grp_l <- vector(mode = "list", length = length(my_k))
dapc_l <- vector(mode = "list", length = length(my_k))
for(i in 1:length(dapc_l)){
set.seed(9)
grp_l[[i]] <- find.clusters(gl.necrophora.filtered, n.pca = 20, n.clust = my_k[i])
dapc_l[[i]] <- dapc(gl.necrophora.filtered, pop = grp_l[[i]]$grp, n.pca = 20, n.da = my_k[i])
#dapc_l[[i]] <- dapc(gl.necrophora.filtered, pop = grp_l[[i]]$grp, n.pca = 3, n.da = 2)
}
#A nice perspective is to create a scatterplot based on the discriminant functions. This helps us see how diffferent the resulting clusters are and if we may have chosen too high of a value for K.
#LD1 and LD2 are discriminant functions
my_df <- as.data.frame(dapc_l[[ length(dapc_l) ]]$ind.coord)
my_df$Group <- dapc_l[[ length(dapc_l) ]]$grp
head(my_df)
my_pal <- RColorBrewer::brewer.pal(n=8, name = "Dark2")
#The above palette only takes 8 colors maximum
#create a new palette:
#my_pal <- c(brewer.pal(name="Dark2", n = 8), brewer.pal(name="Paired", n = 8))
#Plot1 LD 1 and LD2
p1 <- ggplot(my_df, aes(x = LD1, y = LD2, color = Group, fill = Group))
p1 <- p1 + geom_point(size = 4, shape = 21)
p1 <- p1 + theme_bw()
p1 <- p1 + scale_color_manual(values=c(my_pal))
p1 <- p1 + scale_fill_manual(values=c(paste(my_pal, "66", sep = "")))
p1
#Plot LD2 and LD3
p2 <- ggplot(my_df, aes(x = LD2, y = LD3, color = Group, fill = Group))
p2 <- p2 + geom_point(size = 4, shape = 21)
p2 <- p2 + theme_bw()
p2 <- p2 + scale_color_manual(values=c(my_pal))
p2 <- p2 + scale_fill_manual(values=c(paste(my_pal, "66", sep = "")))
p2
#A principal components analysis (PCA) converts the observed SNP data into a set of values of linearly uncorrelated variables called principal components that summarize the variation between samples. We can perform a PCA on our genlight object by using the glPCA function.
###############Separate in 3 lineages (~Hyp_Final) #######################
setPop(gl.necrophora.filtered) <-~Hyp_Final
necrophora.pca <- glPca(gl.necrophora.filtered, nf = 3)
barplot(100*necrophora.pca$eig/sum(necrophora.pca$eig), col = heat.colors(50), main="PCA Eigenvalues")
title(ylab="Percent of variance\nexplained", line = 2)
title(xlab="Eigenvalues", line = 1)
#The barplot indicates that we will need to only retain the first 3 PCAs, which cumulatively explain explain 63.183 percent of the variance of the data.
#To view the results of the PCA we can use the package ggplot2. We need to convert the data frame that contains the principal components (necrophora.pca$scores) into the new object necrophora.pca.scores. In addition, we will add the population values as a new column in our necrophora.pca.scores object, in order to be able to color samples by population.
#ggplot2 will plot the PCA, color the samples by population, and create ellipses that include 95% of the data for each the population:
necrophora.pca.scores <- as.data.frame(necrophora.pca$scores)
necrophora.pca.scores$pop <- pop(gl.necrophora.filtered)
cols <- brewer.pal(n = nPop(gl.necrophora.filtered), name = "Dark2")
library(ggplot2)
set.seed(9)
p <- ggplot(necrophora.pca.scores, aes(x=PC1, y=PC2, colour=pop))
p <- p + geom_point(size=2)
p <- p + stat_ellipse(level = 0.99, size = 1)
p <- p + scale_color_manual(values = cols)
p <- p + geom_hline(yintercept = 0)
p <- p + geom_vline(xintercept = 0)
p <- p + theme_bw()
p
s.class(necrophora.pca$scores, pop(gl.necrophora.filtered), col=colors()[c(120,131,134)])
add.scatter.eig(necrophora.pca$eig,3,1,3)
#Extraction values from PCA
#pca<-gl.pcoa(gl.necrophora.subset,nfactors=5)
gl.pcoa.plot(necrophora.pca, gl.necrophora.filtered, ellipse=TRUE, plevel=0.95,hadjust=1.5,
vadjust=1)
if (requireNamespace("plotly", quietly = TRUE)) {
#interactive plot to examine labels
gl.pcoa.plot(necrophora.pca, gl.necrophora.filtered, interactive=T)
}
install.packages("shiny")
install.packages("gamlss")
install.packages("magrittr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("cowplot")
install.packages("gridExtra")
install.packages("rmarkdown") # 07.06.2022 if errors that there is no markdown package, try 'install.packages("markdown")'
install.packages("plotly")
install.packages("yaml")
install.packages("shiny")
install.packages("dplyr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("shiny")
install.packages("gamlss")
install.packages("magrittr")
install.packages("dplyr")
install.packages("tidyr")
install.packages("shiny")
install.packages("shiny")
install.packages("cowplot")
install.packages("gridExtra")
install.packages("rmarkdown") # 07.06.2022 if errors that there is no markdown package, try 'install.packages("markdown")'
install.packages("plotly")
install.packages("yaml")
BiocManager::install("Biostrings")
shiny::runApp('~/programs/EditR')
shiny::runApp('~/programs/EditR')
